//  Sqaaakois Fabric Mod Build Script
//  Version 1.6 for Minecraft 1.19.2

plugins {
  id 'fabric-loom' version '1.0-SNAPSHOT'
  id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

import groovy.json.JsonSlurper

//  Build time
def date = new Date()
def time = date.format("yyyy-MM-dd'T'HH:mm:ssZ")
def version_time = date.format("dd-MM-yyyy'-'HH-mm-ss")
def folder_time = date.format("dd-MM-yyyy'/'HH-mm-ss")

//  Configuration

def config = (new JsonSlurper()).parseText(new File("./config.json").text)

//  Mod metadata
def mod = [
  id: config.get("mod").get("id"),
  name: config.get("mod").get("name"),
  version: config.get("mod").get("version")
]

//  Package name
def packageGroup = config.get("package") + "." + mod.id

//  Versions
def dep_versions = [
  minecraft: config.get("dependencies").get("minecraft"),
  mappings: config.get("dependencies").get("mappings"),
  fabric_loader: config.get("dependencies").get("fabric_loader"),
  fabric_api: config.get("dependencies").get("fabric_api"),
  modmenu: config.get("dependencies").get("modmenu")
]

// Set player username

boolean enableUsername = config.get("enable_username")
def usernameArgument = project.getProperties().get("username")
def username = ""

if (usernameArgument == null && enableUsername) {
  username = System.getProperty("user.name").replaceAll(" ", "_")
  username = username.substring(0, Math.min(username.length(), 16));
} else if (username.length <= 0) {
  username = "";
} else {
  username = usernameArgument;
}

//  Setup run folder from template
if (!file('runClient').exists()) {
  copy {
    from("run_template")
    into("runClient")
  }
}

def release = project.getProperties().get("release") != null

version = mod.version + (release ? "" : "+" + version_time)
group = packageGroup
archivesBaseName = mod.id
libsDirName = "../out/${folder_time}"

compileJava {
    options.compilerArgs << "-Xlint"
    options.compilerArgs << "-Xlint:-processing"
}

repositories {
  // Add repositories to retrieve artifacts from in here.
  // You should only use this when depending on other mods because
  // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
  // See https://docs.gradle.org/current/userguide/declaring_repositories.html
  // for more information about repositories.
  flatDir {
      dirs 'libs'
  }
  for (i in config.get("dependencies").get("maven_repositories")) {
    maven {
        url = i
    }
  }
}

dependencies {
  // Nullable annotations
  implementation 'com.google.code.findbugs:jsr305:3.0.2'
  // To change the versions see the dep_versions object
  minecraft "com.mojang:minecraft:${dep_versions.minecraft}"
  mappings "net.fabricmc:yarn:" + dep_versions.mappings + ":v2"
  modImplementation "net.fabricmc:fabric-loader:${dep_versions.fabric_loader}"

  // Fabric API. This is technically optional, but you probably want it anyway.
  modImplementation "net.fabricmc.fabric-api:fabric-api:${dep_versions.fabric_api}"


  for (i in config.get("dependencies").get("libraries")) {
    modImplementation i
  }
  for (i in config.get("dependencies").get("libraries_compile")) {
    modCompile i
  }
  for (libfile in config.get("dependencies").get("library_files")) {
    modImplementation name: libfile
    modCompile name: libfile
  }

  // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
  // You may need to force-disable transitiveness on them.
}

loom {
  def awf = file("src/main/resources/${mod.id}.accesswidener")
  if (awf.exists()) {
    if (!awf.text.replace("\n", "").replace("\r", "").replace(" ", "").isEmpty()) {
      accessWidenerPath = awf
    }
  }
  runs {
    client {
      inherit client
      name = "Run Client"
      runDir "runClient"
      if (username.length() > 0) {
        programArgs "--username", username
      }
    }
    server {
      inherit server
      name = "Run Server"
      runDir "runServer"
    }
  }
}

processResources {
  filesMatching("fabric.mod.json") {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
      "mod_id": mod.id,
      "mod_name": mod.name,
      "package": packageGroup,
      "minecraft_version": dep_versions.minecraft,
      "version": project.version
    ])
  }
  filesMatching(mod.id + ".mixins.json") {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
      "package": packageGroup
    ])
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  it.options.release = 17
}

java {
  // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
  // if it is present.
  // If you remove this line, sources will not be generated.
  withSourcesJar()
}

jar {
  from("LICENSE") {
    rename { "${it}_${project.archivesBaseName}"}
  }
}

// configure the maven publication
publishing {
  publications {
    mavenJava(MavenPublication) {
			from components.java
    }
  }

  // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
  repositories {
    // Add repositories to publish to here.
    // Notice: This block does NOT have the same function as the block in the top level.
    // The repositories here will be used for publishing your artifact, not for
    // retrieving dependencies.
  }
}
